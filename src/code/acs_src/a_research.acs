// All Out War 2 Research purchase function
// Credit to VoltlocK for originally creating the engine
// With modifications by Eruanna, Dusk, the Omega Team, and the Theta Team

// You may use portions of this script in your project as long as you give credit where credit is
// due. Please don't be lame and just copy-paste any of this and call it your own. Thanks!

//---------------------------RESEARCH ENHANCED REFINING

function void PurchaseResearch (int c)
{
    int team = PlayerTeam();
	int cost = Researches[c][CK_COST];

    bool addon = Researches[c][CK_FLAGS] & CF_ADDON;

	// [SP] This is to fix the "double cost" bug
	if (Timer() - LastMenu[PlayerNumber()] < 5)
		return;

	LastMenu[PlayerNumber()] = Timer();

	// Check dependencies
	int dep = Researches[c][CK_DEP];

	if (!IsAdmin[PlayerNumber()])
	{
        if ((dep == DEP_BARRACKS || dep == DEP_CENTRE) && !GotBarracks[Team])
		{
            ErrorTop("Your \cFbarracks\c- has been destroyed!");
			return;
		}

		if (dep == DEP_CENTRE && !GotPlant[Team])
		{
            ErrorTop("Your \cFresearch centre\c- has been destroyed!");
			return;
		}

		if (dep == DEP_REFINERY && !GotRefinery[Team])
		{
            ErrorTop("Your \cFrefinery\c- has been destroyed!");
			return;
		}
	}

	// Check monies
	if (!CheckCreditsTop(cost))
		return;

	int cflags = Researches[c][CK_FLAGS];



	// Apply the researches
	switch (c)
	{
		case RES_ENHANCEDREF:
		{
			if (EnhancedRefining[PlayerTeam()])
			{
				ErrorTop(StrParam(s: "Your team already has", s: Researches[c][CK_NAME], s: "!"));
				return;
			}

			EnhancedRefining[PlayerTeam()] = True;
			AddExperience(150);

			break;
		}

		case RES_ADVMECHS:
		{
			if (AdvancedMechResearch[PlayerTeam()])
			{
				ErrorTop(StrParam(s: "Your team already has", s: Researches[c][CK_NAME], s: "!"));
				return;
			}

			AdvancedMechResearch[PlayerTeam()] = True;
			AddExperience(150);

			break;
		}

		case RES_OBBYRES:
		{
			str name = cond(team == TEAM_BLUE, "Tesla Coil", "Obelisk");

			if (GotObelisk[PlayerTeam()])
			{
				ErrorTop(strparam(s:"The ", s:name, s:" is already active!"));
				return;
			}

			if(RestoringObelisk[PlayerTeam()])
			{
				ErrorTop(strparam(s:"The ", s:name, s:" is already being restored!"));
				return;
			}

			AddExperience(750);

			ACS_ExecuteWithResult(SC_RestoreObelisk, team);
			BigMessageTop("Started restoration!");

			break;
		}

		case RES_HPREGEN:
		{
			if((PlayerTeam() == TEAM_RED && ThingCount(T_NONE, 902)) ||
				(PlayerTeam() == TEAM_BLUE && ThingCount(T_NONE, 903)))
			{
				ErrorTop("This has already been built!");
				return;
			}

			ACS_ExecuteAlways(344, 0, 6);
			BigMessageTop("\ciConstruction Complete!");

			if(PlayerTeam() == TEAM_RED)
				SpawnSpot("Utility_GlobalMedicCacheRed", 212);
			else
				SpawnSpot("Utility_GlobalMedicCacheBlue", 112);

			break;
		}

		case RES_AMMOREGEN:
		{


			if((PlayerTeam() == TEAM_RED && ThingCount(T_NONE, 904)) ||
				(PlayerTeam() == TEAM_BLUE && ThingCount(T_NONE, 905)))
			{
				ErrorTop("This has already been built!");
				return;
			}

			BigMessageTop("Construction Complete");

			ACS_ExecuteAlways(344, 0, 8);

			if(PlayerTeam() == TEAM_RED)
				SpawnSpot("Utility_GlobalAmmoCacheRed", 213);
			else
				SpawnSpot("Utility_GlobalAmmoCacheBlue", 113);

			break;
		}

		case RES_TIMEDC4:
		{
			if(GetAmmoCapacity("TimedC4") >= 4)
			{
				ErrorTop("You already have 4!");
				return;
			}

			SetInventory("TimedC4", CheckInventory("TimedC4") + 1);
			TakeInventory("PurchaseToken", 1);
			Log(s: pname(-1), s: " purchases +1 timed C4");

			break;
		}

		case RES_REPAIRGUN:
		{
			if (CheckInventory("RepairGunUpgrade"))
			{
				ErrorTop("You already have this!");
			}

			if (!CheckInventory("RepairGun"))
			{
				ErrorTop("You must have a repair gun!");
				return;
			}

			BigMessageTop("\ciUpgraded the Repair Gun!");
			GiveInventory("RepairGunUpgrade", 1);
			SetWeapon("RepairGun");

			break;
		}

		case RES_ADVTURR:
		{
			if (AdvancedTurrets[!PlayerTeam()])
			{
				ErrorTop("This has already been researched!");
				return;
			}

			AddExperience(150);
			BigMessage("\ciResearch Complete!");
			AdvancedTurrets[!PlayerTeam()] = True;

			break;
		}

		case RES_MORETURR:
		{
			if (MoreTurrets[PlayerTeam()])
			{
				ErrorTop("This has already been researched!");
				return;
			}

			AddExperience(150);

			MoreTurrets[PlayerTeam()] = True;
			MaxTurrets[!PlayerTeam()] += 5;
			BigMessageTop("\ciResearch Complete!");

			break;
		}
	}

	TakeInventory("PurchaseToken", 1);
	DisplayTick();
	SpendCreditsTop(cost);
	GivePoints(POINTS_RESEARCH);
}
