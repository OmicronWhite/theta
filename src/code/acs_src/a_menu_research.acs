// because linguist -*- mode: c;-*-

// ACS Menu Thing by +Sean
// Feel free to use this as long as you give credit.

#define MSCR_ENTER               488
#define MSCR_DRAW                489
#define MSCR_CLEAR               490
#define MSCR_INPUT_LOOP          491
#define MSCR_EXIT                492
#define MSCR_INPUTRECV           493
#define MSCR_DEATHRESET          494
#define MSCR_QUITRESET           495


// This function is called when the player has chosen an item.
function void MR_InputReceived(int category, int item) { ACS_ExecuteAlways(MSCR_INPUTRECV, 0, category, item); }
Script MSCR_INPUTRECV (int category, int item)
{
    int player = PlayerNumber();
    bool shouldExit = false;

    playerSelection[PlayerNumber()][MSIDE_CATEGORIES] = 0;
    playerSelection[PlayerNumber()][MSIDE_ITEMS] = 0;

    if (category <= RMS_NUM && resMenuItems[playerSelection[PlayerNumber()][MSIDE_CATEGORIES]][playerSelection[PlayerNumber()][MSIDE_ITEMS]] != -1)
        PurchaseResearch(resMenuItems[playerSelection[PlayerNumber()][MSIDE_CATEGORIES]][playerSelection[PlayerNumber()][MSIDE_ITEMS]]);

    LocalAmbientSound("menu/choose", 127);

    //if (shouldExit) { MR_Exit2(); }
}

// User enters menu.
function void MR_Enter (void) { ACS_ExecuteAlways(MSCR_Enter, 0, 0, 0, 0); }
Script MSCR_Enter (void)
{
    int player = PlayerNumber();
    if (!CheckInventory("InMenu")) {
        SetInventory("InMenu", 1);
        MR_Freeze();
        MR_Draw();
        Delay(MIL_DELAY); // prevents accidentally selecting an option
        MR_InputLoop_Start();
    }
}

function void MR_Exit (void) { ACS_ExecuteAlways(MSCR_EXIT, 0, 0, 0); }
function void MR_Exit2 (void) { ACS_ExecuteAlways(MSCR_EXIT, 0, 0, 0, 0); }
Script MSCR_Exit (void)
{
    int player = PlayerNumber();
    SetInventory("InMenu", 0);
    //MR_InputLoop_Stop(); // Its now stopped by inMenu being false.
    MR_Clear();
    MR_Unfreeze();

    SetInventory("PlayerSelection", 0);
    SetInventory("PlayerSide", 0);
}

function str MR_ItemString(int side, int category, int item)
{
    int player = PlayerNumber();
    str value = "";

    // some useful variables
    int creds = Credits[PlayerNumber()];

    if (playerSide[PlayerNumber()] == MSIDE_CATEGORIES)
    {
        if (side == MSIDE_ITEMS)
            return StrParam(s: "\cm", s: cond((resMenuItems[category][item] == -1), "----", Researches[resMenuItems[category][item]][CK_NAME]));

        if (item == 5)
        {
            if (playerSelection[PlayerNumber()][MSIDE_CATEGORIES] == item && side == MSIDE_CATEGORIES)
                    return StrParam(s: "\cf", s: resMenuCategoryNames[item]);

            if (playerSelection[PlayerNumber()][MSIDE_CATEGORIES] != item && side == MSIDE_CATEGORIES)
                    return StrParam(s: "\ci", s: resMenuCategoryNames[item]);
        }
        else
        {
            if (playerSelection[PlayerNumber()][MSIDE_CATEGORIES] == item && side == MSIDE_CATEGORIES)
                    return StrParam(s: "\cd", s: resMenuCategoryNames[item]);

            if (playerSelection[PlayerNumber()][MSIDE_CATEGORIES] != item && side == MSIDE_CATEGORIES)
                    return StrParam(s: "\cq", s: resMenuCategoryNames[item]);
        }
    }

    else if (playerSide[PlayerNumber()] == MSIDE_ITEMS)
    {
        if (side == MSIDE_CATEGORIES)
            return StrParam(s: "\cm", s: resMenuCategoryNames[item]);

        // selected empty
        if (playerSelection[PlayerNumber()][MSIDE_ITEMS] == item && playerSelection[PlayerNumber()][MSIDE_CATEGORIES] == category
            && resMenuItems[category][item] == -1)
            return "\cc----";

        // unselected empty
        if (playerSelection[PlayerNumber()][MSIDE_ITEMS] != item && playerSelection[PlayerNumber()][MSIDE_CATEGORIES] == category
            && resMenuItems[category][item] == -1)
            return "\cm----";

        // SELECTED     ALREADY OWNED ADDON
        if (playerSelection[PlayerNumber()][MSIDE_ITEMS] == item
            && playerSelection[PlayerNumber()][MSIDE_CATEGORIES] == category
            && side == MSIDE_ITEMS
            && (creds < Researches[resMenuItems[category][item]][CK_COST]
                || (Researches[resMenuItems[category][item]][CK_FLAGS] & CF_ADDON
                    && CheckInventory(GetClassItemName(resMenuItems[category][item], 0)) > 0)))
                return StrParam(s: "\cc", s: cond(item  == 3 && category == 4, cond(!PlayerTeam(), "Ion Cannon Beacon", "Nuclear Strike Beacon"), Researches[resMenuItems[category][item]][CK_NAME]));

        // UNSELECTED   ALREADY OWNED ADDON
        if (playerSelection[PlayerNumber()][MSIDE_ITEMS] != item
            && playerSelection[PlayerNumber()][MSIDE_CATEGORIES] == category
            && side == MSIDE_ITEMS
            && (creds < Researches[resMenuItems[category][item]][CK_COST]
                || (Researches[resMenuItems[category][item]][CK_FLAGS] & CF_ADDON
                    && CheckInventory(GetClassItemName(resMenuItems[category][item], 0)) > 0)))
                return StrParam(s: "\cm", s: cond(item  == 3 && category == 4, cond(!PlayerTeam(), "Ion Cannon Beacon", "Nuclear Strike Beacon"), Researches[resMenuItems[category][item]][CK_NAME]));

        // SELECTED
        if (playerSelection[PlayerNumber()][MSIDE_ITEMS] == item
            && playerSelection[PlayerNumber()][MSIDE_CATEGORIES] == category
            && side == MSIDE_ITEMS)
                return StrParam(s: "\cd", s: cond(item  == 3 && category == 4, cond(!PlayerTeam(), "Ion Cannon Beacon", "Nuclear Strike Beacon"), Researches[resMenuItems[category][item]][CK_NAME]));

        // UNSELECTED
        if (playerSelection[PlayerNumber()][MSIDE_ITEMS] != item
            && playerSelection[PlayerNumber()][MSIDE_CATEGORIES] == category
            && side == MSIDE_ITEMS)
                return StrParam(s: "\cq", s: cond(item == 3 && category == 4, cond(!PlayerTeam(), "Ion Cannon Beacon", "Nuclear Strike Beacon"), Researches[resMenuItems[category][item]][CK_NAME]));
    }

    return "\cg!!ERROR!!";
}

function void MR_Freeze (void)
{
    SetPlayerProperty(0, ON, PROP_TOTALLYFROZEN);
}

function void MR_Unfreeze (void)
{
    SetPlayerProperty(0, OFF, PROP_TOTALLYFROZEN);
}

// Draws the menu.
function void MR_Draw (void) { ACS_ExecuteAlways(MSCR_Draw, 0, 0, 0, 0); }
Script MSCR_Draw (void)
{
    int player = PlayerNumber();

    // Draw categories
    int c_startY = 0.45;
    int c_incY = 0.03;

    for (int i = 0; i < RMS_NUM; i++)
    {
        if ((IsResignedN()) && i == 5) continue;
        SetFont("BIGFONT");
        HudMessage(s: MR_ItemString(MSIDE_CATEGORIES, 0, i);
                HUDMSG_PLAIN, 600 + i, CR_GREY, MUI_CATEGORIES_X, c_startY, 0);
        SetFont("DOOMFONT");
        c_startY += c_incY;
    }

    // Draw items
    int i_startY = 0.45;
    int i_incY = 0.03;

    for (int i1 = 0; i1 < MAX_ITEMS; i1++)
    {
        if (playerSelection[PlayerNumber()][MSIDE_CATEGORIES] == 5)
        {
            MR_ClearHudMsg(700 + i1);
            continue;
        }

        SetFont("BIGFONT");
        HudMessage(s: MR_ItemString(MSIDE_ITEMS, playerSelection[PlayerNumber()][MSIDE_CATEGORIES], i1);
                HUDMSG_PLAIN, 700 + i1, CR_GREY, MUI_ITEMS_X, i_startY, 0);
        SetFont("DOOMFONT");
        i_startY += i_incY;
    }
    // Draw help
    HudMessage(s: "\cfHelp\n",
                s: "\cdMove up: \cq", k: "+forward",
                s: "\n\cdMove down: \cq", k: "+back",
                s: "\n\cdSwitch side: \cq", k: "+left", s: "\cd and \cq ", k: "+right",
                s: "\n\cdSelect: \cq", k: "+use", s: "\cd or \cq", k: "+attack",
                s: "\n\cdExit: \cq", k: "+altattack";
                HUDMSG_PLAIN, 599, CR_GREEN, 1.5, 0.8, 0);

    int classno = resMenuItems[playerSelection[PlayerNumber()][MSIDE_CATEGORIES]][playerSelection[PlayerNumber()][MSIDE_ITEMS]];

    // don't draw this next bit if
    if (classno == -1)
    {
        MR_ClearHudMsg(598);
        terminate;
    }

    str depStr = "";
    switch(Researches[classno][CK_DEP])
    {
        case DEP_CENTRE:
        {
            depStr = "Research Centre";
            break;
        }

        case DEP_BARRACKS:
        {
            depStr = "Barracks";
            break;
        }

        case DEP_REFINERY:
        {
            depStr = "Refinery";
            break;
        }

        default:
        {
            depStr = "None";
            break;
        }
    }

    int creds = Credits[PlayerNumber()];

    // Draw class information
    HudMessage(s: "\ct", s: Researches[classno][CK_NAME], s: "\n",
                s: "\cdCost: \cq", s: cond((Researches[classno][CK_COST] == 0), "Free", StrParam(s: cond((creds < Researches[classno][CK_COST]), "\cc", ""), s: "$",  d: Researches[classno][CK_COST])), s: "\n",
                s: "\cdDependency: \cq", s: depStr, s: "\n\n",
                s: "\ctDescription\n\cj",
                s: Researches[classno][CK_DESC];
                HUDMSG_PLAIN, 598, CR_WHITE, 0.4, 0.65, 0);
}

function void MR_ClearHudMsg(int id)
{
        HudMessage(s: ""; HUDMSG_PLAIN, id, CR_GREY, 0, 0, 0);
}

function void MR_Clear (void) { ACS_ExecuteAlways(MSCR_Clear, 0, 0, 0, 0); }
Script MSCR_Clear (void)
{
    for (int i = 0; i < RMS_NUM; i++) {
        MR_ClearHudMsg(600 + i);
    }

    for (int i1 = 0; i1 < MAX_ITEMS; i1++) {
        MR_ClearHudMsg(700 + i1);
    }

    MR_ClearHudMsg(599);
    MR_ClearHudMsg(598);
}

function void MR_InputLoop_Start (void) { ACS_ExecuteAlways(MSCR_Input_Loop, 0, 0, 0, 0); }
function void MR_InputLoop_Stop (void) { ACS_Terminate(MSCR_Input_Loop, 0); }
Script MSCR_Input_Loop (void)
{
    int input = GetPlayerInput(-1, INPUT_BUTTONS);
    int player = PlayerNumber();
    bool inputUsed = false; // This is to stop us from drawing the menu again if nothing changed.

    if (input & BT_FORWARD)
    {
        inputUsed = true;

        if (playerSide[PlayerNumber()] == MSIDE_CATEGORIES
            && playerSelection[PlayerNumber()][MSIDE_CATEGORIES] == 0)
//              playerSelection[PlayerNumber()][MSIDE_CATEGORIES] == CATEGORIES_AMOUNT - cond((!drawResign[player] || IsResignedN()), 2, 1);
                playerSelection[PlayerNumber()][MSIDE_CATEGORIES] = (RMS_NUM - IsResignedN() - 1);
        else if (playerSide[PlayerNumber()] == MSIDE_ITEMS
            && playerSelection[PlayerNumber()][MSIDE_ITEMS] == 0)
                playerSelection[PlayerNumber()][MSIDE_CATEGORIES] = MAX_ITEMS - 1;
        else
            if (playerSide[PlayerNumber()] == MSIDE_CATEGORIES)
                playerSelection[PlayerNumber()][MSIDE_CATEGORIES] -= 1;
            else
                playerSelection[PlayerNumber()][MSIDE_ITEMS] -= 1;

        LocalAmbientSound("menu/cursor", 127);

        DebugLog(StrParam(d: playerSelection[PlayerNumber()][MSIDE_CATEGORIES], s:", ", d: playerSelection[PlayerNumber()][MSIDE_ITEMS]));
    }

    if (input & BT_BACK)
    {
        inputUsed = true;

        if (playerSide[PlayerNumber()] == MSIDE_CATEGORIES && playerSelection[PlayerNumber()][MSIDE_CATEGORIES] == RMS_NUM - 1)
            playerSelection[PlayerNumber()][MSIDE_CATEGORIES] = 0;
        else if (playerSide[PlayerNumber()] == MSIDE_ITEMS
            && playerSelection[PlayerNumber()][MSIDE_ITEMS] == MAX_ITEMS - 1)
                playerSelection[PlayerNumber()][MSIDE_ITEMS] = 0;
        else
            if (playerSide[PlayerNumber()] == MSIDE_CATEGORIES)
                playerSelection[PlayerNumber()][MSIDE_CATEGORIES] += 1;
            else
                playerSelection[PlayerNumber()][MSIDE_ITEMS] += 1;

        LocalAmbientSound("menu/cursor", 127);

        DebugLog(StrParam(d: playerSelection[PlayerNumber()][MSIDE_CATEGORIES], s:", ", d: playerSelection[PlayerNumber()][MSIDE_ITEMS]));
    }

    if (input & BT_MOVELEFT || input & BT_LEFT)
    {
        if (playerSide[PlayerNumber()] != MSIDE_CATEGORIES)
        {
            inputUsed = true;
            playerSide[PlayerNumber()] = MSIDE_CATEGORIES;
            LocalAmbientSound("menu/activate", 127);
        }
    }

    if (input & BT_MOVERIGHT || input & BT_RIGHT)
    {
        if (playerSide[PlayerNumber()] != MSIDE_ITEMS)
        {
            inputUsed = true;

            if (playerSelection[PlayerNumber()][MSIDE_CATEGORIES] != 5)
            {
                playerSide[PlayerNumber()] = MSIDE_ITEMS;
                LocalAmbientSound("menu/activate", 127);
            }
        }
    }

    if (input & BT_ALTATTACK)
    {
        MR_Exit();
    }

    if (input & BT_USE || input & BT_ATTACK)
    {
        inputUsed = true;

        if (playerSide[PlayerNumber()] == MSIDE_CATEGORIES)
            if (playerSelection[PlayerNumber()][MSIDE_CATEGORIES] == 5 && (drawResign[player] || !IsResignedN()))
                MR_InputReceived(playerSelection[PlayerNumber()][MSIDE_CATEGORIES],
                    playerSelection[PlayerNumber()][MSIDE_ITEMS]);
            else {
                SetInventory("PlayerSide", MSIDE_ITEMS);
                LocalAmbientSound("menu/activate", 127);
            }
        else
            MR_InputReceived(playerSelection[PlayerNumber()][MSIDE_CATEGORIES],
                    playerSelection[PlayerNumber()][MSIDE_ITEMS]);
    }


    if (inputUsed) { MR_Draw(); }
    Delay(MIL_DELAY);
    if (CheckInventory("InMenu")) restart;
}

function void MR_DeathReset (void) { ACS_ExecuteAlways(MSCR_DEATHRESET, 0, 0, 0, 0); }
Script MSCR_DEATHRESET DEATH { MR_Exit(); }

function void MR_QuitReset (void) { ACS_ExecuteAlways(MSCR_QUITRESET, 0, 0, 0, 0); }
Script MSCR_QUITRESET (int gone) DISCONNECT { if (PlayerNumber() == gone) MR_Exit(); }

Script 65 (void) MR_Enter();
Script 66 (void) MR_Enter();
Script 67 (void) MR_Enter();
Script 68 (void) MR_Enter();
Script 69 (void) MR_Enter();
Script 70 (void) MR_Enter();
Script 71 (void) MR_Enter();
Script 72 (void) MR_Enter();
Script 73 (void) MR_Enter();
